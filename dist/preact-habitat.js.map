{"version":3,"sources":["../src/lib.js","../src/index.js"],"names":["camelcasize","str","replace","all","letter","toUpperCase","getExecutedScript","fallback","document","currentScript","Error","let","scripts","getElementsByTagName","length","collectPropsFromElement","element","defaultProps","attrs","attributes","props","Object","assign","keys","forEach","key","hasOwnProperty","dataAttrName","name","propName","split","pop","propValue","nodeValue","call","scrp","propsObj","hasAttribute","getAttribute","JSON","parse","innerHTML","e","getHabitatSelectorFromClient","scriptTagAttrs","selector","widgetDOMHostElements","ref","inline","clientSpecified","scriptFallback","hostNodes","parentNode","push","querySelectorAll","queriedTag","preactRender","widget","hostElements","root","cleanRoot","elm","hostNode","_habitat","render","h","habitat","Widget","elements","loaded","clean","addEventListener"],"mappings":"wBAQMA,EAAc,SAAAC,GAClB,MAAOA,GAAIC,QAAQ,aAAc,SAACC,EAAKC,GACrC,MAAOA,GAAOC,iBASZC,EAAoB,SAACC,GACzB,uBADoC,GAElCC,SAASC,eACT,WACE,IAAKF,EACH,KAAM,IAAIG,OAAM,0BAGlBC,IAAIC,GAAUJ,SAASK,qBAAqB,SAC5C,OAAOD,GAAQA,EAAQE,OAAS,OAUhCC,EAA0B,SAACC,EAASC,qBACxCN,IAAIO,GAAQF,EAAQG,WAEhBC,EAAQC,OAAOC,UAAWL,EAoC9B,OAjCAI,QAAOE,KAAKL,GAAOM,QAAQ,SAAAC,GACzB,GAAIP,EAAMQ,eAAeD,GAAM,CAC7Bd,GAAIgB,GAAeT,EAAMO,GAAKG,IAC9B,KAAKD,GAAwC,gBAAjBA,GAC1B,OAAO,CAEThB,IAAIkB,GAAWF,EAAaG,MAAM,kBAAkBC,OAAS,EAE7D,IADAF,EAAW7B,EAAY6B,GACnBF,IAAiBE,EAAU,CAC7BlB,GAAIqB,GAAYd,EAAMO,GAAKQ,SAC3Bb,GAAMS,GAAYG,SAMrBR,QAAQU,KAAKlB,EAAQH,qBAAqB,UAAW,SAAAsB,GACtDxB,GAAIyB,KACJ,IAAGD,EAAKE,aAAa,QAAS,CAC5B,GACgC,eAA9BF,EAAKG,aAAa,SACY,qBAA9BH,EAAKG,aAAa,QAElB,MACF,KACEF,EAAWG,KAAKC,MAAML,EAAKM,WAC3B,MAAMC,GACN,KAAM,IAAIhC,OAAMgC,GAElBrB,OAAOC,OAAOF,EAAOgB,MAIlBhB,GAGHuB,EAA+B,SAAClC,GACpCE,GAAIiC,GAAiBnC,EAAcU,WAC/B0B,EAAW,IAUf,OARAxB,QAAOE,KAAKqB,GAAgBpB,QAAQ,SAAAC,GAClC,GAAImB,EAAelB,eAAeD,GAAM,CAEjB,kBADAmB,EAAenB,GAAKG,OAEvCiB,EAAWD,EAAenB,GAAKQ,cAI9BY,GASHC,EAAwB,SAC5BC,MAAEF,GAAQE,EAAAF,SAAEG,EAAMD,EAAAC,OAAEC,EAAeF,EAAAE,gBAAEC,EAAcH,EAAAG,eAE/CC,KACA1C,EAAgBH,EAAkB4C,EAEtC,KAAe,IAAXF,EAAiB,CACnBrC,GAAIyC,GAAa3C,EAAc2C,UAC/BD,GAAUE,KAAKD,GAWjB,OATwB,IAApBH,GAA6BJ,IAE/BA,EAAWF,EAA6BlC,IAEtCoC,MACCrB,QAAQU,KAAK1B,SAAS8C,iBAAiBT,GAAW,SAAAU,GACnDJ,EAAUE,KAAKE,KAGZJ,GAOHK,EAAe,SAACC,EAAQC,EAAcC,EAAMC,EAAW3C,GAC3DyC,EAAalC,QAAQ,SAAAqC,GACnBlD,GAAImD,GAAWD,CACf,KAAIC,EAASC,SAAb,CAGAD,EAASC,UAAW,CACpBpD,IAAIS,GAAQL,EAAwB8C,EAAK5C,IAAiBA,CAI1D,OAHG2C,KACDE,EAASrB,UAAY,IAEhBuB,EAAAA,OAAOC,EAAAA,EAAER,EAAQrC,GAAQ0C,EAAUH,OCxIxCO,EAAU,SAAAC,GAEdxD,GAAI8C,GAASU,CAqCb,QAASH,OAjCI,SACXjB,sDACa,qCACF,iCACD,2CACU,0CACD,0CAInBpC,IAAIyD,GAAWtB,GACbD,SAAAA,EACAG,OAAAA,EACAC,gBAAAA,EACAC,eAAAA,IAEEmB,EAAS,WACX,GAAID,EAAStD,OAAS,EAAG,CACvBH,GAAIyD,GAAWtB,GACbD,SAAAA,EACAG,OAAAA,EACAC,gBAAAA,EACAC,eAAAA,GAGF,OAAOM,GAAaC,EAAQW,EA3BvB,KA2BuCE,EAAOrD,IAGvDoD,KACA7D,SAAS+D,iBAAiB,mBAAoBF,GAC9C7D,SAAS+D,iBAAiB,OAAQF","file":"preact-habitat.js","sourcesContent":["import { h, render } from \"preact\";\n/**\n * Removes `-` fron a string and capetalize the letter after\n * example: data-props-hello-world =>  dataPropsHelloWorld\n * Used for props passed from host DOM element\n * @param  {String} str string\n * @return {String} Capetalized string\n */\nconst camelcasize = str => {\n  return str.replace(/-([a-z])/gi, (all, letter) => {\n    return letter.toUpperCase();\n  });\n};\n\n/**\n * [getExecutedScript internal widget to provide the currently executed script]\n * @param  {document} document [Browser document object]\n * @return {HTMLElement}     [script Element]\n */\nconst getExecutedScript = (fallback = true) => {\n  return (\n    document.currentScript ||\n    (() => {\n      if (!fallback) {\n        throw new Error('currentScript not found');\n      }\n\n      let scripts = document.getElementsByTagName(\"script\");\n      return scripts[scripts.length - 1];\n    })()\n  );\n};\n\n/**\n * Get the props from a host element's data attributes\n * @param  {Element} tag The host element\n * @return {Object}  props object to be passed to the component\n */\nconst collectPropsFromElement = (element, defaultProps = {}) => {\n  let attrs = element.attributes;\n\n  let props = Object.assign({}, defaultProps);\n\n  // collect from element\n  Object.keys(attrs).forEach(key => {\n    if (attrs.hasOwnProperty(key)) {\n      let dataAttrName = attrs[key].name;\n      if (!dataAttrName || typeof dataAttrName !== \"string\") {\n        return false;\n      }\n      let propName = dataAttrName.split(/(data-props?-)/).pop() || '';\n      propName = camelcasize(propName);\n      if (dataAttrName !== propName) {\n        let propValue = attrs[key].nodeValue;\n        props[propName] = propValue;\n      }\n    }\n  });\n\n  // check for child script text/props or application/json\n  [].forEach.call(element.getElementsByTagName('script'), scrp => {\n    let propsObj = {}\n    if(scrp.hasAttribute('type')) {\n      if (\n        scrp.getAttribute(\"type\") !== \"text/props\" &&\n        scrp.getAttribute(\"type\") !== \"application/json\"\n      )\n        return;\n      try {\n        propsObj = JSON.parse(scrp.innerHTML);\n      } catch(e) {\n        throw new Error(e)\n      }\n      Object.assign(props, propsObj)\n    }\n  });  \n\n  return props;\n};\n\nconst getHabitatSelectorFromClient = (currentScript) => {\n  let scriptTagAttrs = currentScript.attributes;\n  let selector = null;\n  // check for another props attached to the tag\n  Object.keys(scriptTagAttrs).forEach(key => {\n    if (scriptTagAttrs.hasOwnProperty(key)) {\n      const dataAttrName = scriptTagAttrs[key].name;\n      if (dataAttrName === 'data-mount-in') {\n        selector = scriptTagAttrs[key].nodeValue;\n      }\n    }\n  });\n  return selector\n}\n\n/**\n * Return array of 0 or more elements that will host our widget\n * @param  {id} attrId the data widget id attribute the host should have\n * @param  {document} scope  Docuemnt object or DOM Element as a scope\n * @return {Array}        Array of matching habitats\n */\nconst widgetDOMHostElements = (\n  { selector, inline, clientSpecified, scriptFallback }\n) => {\n  let hostNodes = [];\n  let currentScript = getExecutedScript(scriptFallback);\n\n  if (inline === true) {\n    let parentNode = currentScript.parentNode;\n    hostNodes.push(parentNode);\n  }\n  if (clientSpecified === true && !selector) {\n    // user did not specify where to mount - get it from script tag attributes\n    selector = getHabitatSelectorFromClient(currentScript);\n  }\n  if (selector) {\n    [].forEach.call(document.querySelectorAll(selector), queriedTag => {\n      hostNodes.push(queriedTag);\n    });\n  }\n  return hostNodes;\n};\n\n/**\n * preact render function that will be queued if the DOM is not ready\n * and executed immeidatly if DOM is ready\n */\nconst preactRender = (widget, hostElements, root, cleanRoot, defaultProps) => {\n  hostElements.forEach(elm => {\n    let hostNode = elm;\n    if (hostNode._habitat) {\n      return; \n    }\n    hostNode._habitat = true;\n    let props = collectPropsFromElement(elm, defaultProps) || defaultProps;\n    if(cleanRoot) {\n      hostNode.innerHTML = \"\";\n    }\n    return render(h(widget, props), hostNode, root);\n  });\n};\n\nexport {\n  collectPropsFromElement,\n  widgetDOMHostElements,\n  getExecutedScript,\n  camelcasize,\n  preactRender,\n  getHabitatSelectorFromClient\n};\n","import { widgetDOMHostElements, preactRender } from \"./lib\";\n\nconst habitat = Widget => {\n  // Widget represents the Preact component we need to mount\n  let widget = Widget;\n  // preact root render helper\n  let root = null;\n\n  let render = (\n    {\n      selector = null,\n      inline = false,\n      clean = false,\n      clientSpecified = false,\n      scriptFallback = true,\n      defaultProps = {}\n    } = {}\n  ) => {\n    let elements = widgetDOMHostElements({\n      selector,\n      inline,\n      clientSpecified,\n      scriptFallback\n    });\n    let loaded = () => {\n      if (elements.length > 0) {\n        let elements = widgetDOMHostElements({\n          selector,\n          inline,\n          clientSpecified,\n          scriptFallback\n        });\n\n        return preactRender(widget, elements, root, clean, defaultProps);\n      }\n    };\n    loaded();\n    document.addEventListener(\"DOMContentLoaded\", loaded);\n    document.addEventListener(\"load\", loaded);\n  };\n\n  return { render };\n};\n\nexport default habitat;\n"]}